--- 
title: "Population: US Census Bureau" 
author: "Hiroshi Suzuki"
date: "2022/01/26"
output:
  html_document: 
    df_print: paged
    number_sections: yes
    toc: true
    toc_float: true
  html_notebook: 
    df_print: paged
    number_sections: yes
    toc: true
    toc_float: true
--- 

<div align = "right">Last Updated: `r Sys.Date()`</div>



# About: United States Census Bureau

The Unites States of America Census Burea compiles a huge set of data. It provides data to the [World Fact Book](https://www.cia.gov/library/publications/the-world-factbook/) of [Central Intelligence Agency](https://www.cia.gov/index.html) and the [Census Academy](https://www.census.gov/data/academy.html) resources for Data Science Education.

> In alignment with the [Digital Government Strategy](https://obamawhitehouse.archives.gov/sites/default/files/omb/egov/digital-government/digital-government.html), the Census Bureau is offering the public wider access to key U.S. statistics. ([About](https://www.census.gov/data/developers/about.html))

To study the population analysis of the world and its visualization, visit the following sites:

* Census Academy: https://www.census.gov/data/academy.html
* Infographics & Visualizations: https://www.census.gov/library/visualizations.html
* U.S. and World Population Clock: https://www.census.gov/popclock/world
* Data Tool: https://www.census.gov/data-tools/demo/idb/#/country?YR_ANIM=2020
  
We can access to the data directly or by an API, Application Program Interface.
In the following we study population data of the world in these two ways.

# International Data Base (IDB) December 2020 Release (Now in 2021)

These data files correspond to the data available in the U.S. Census Bureau's API. Each file is pipe "|" delimited, and the header row is demarcated with "#" at the start of the row. For additional technical specifications, including variable definitions, please visit https://www.census.gov/data/developers/data-sets/international-database.html

For more information about the International Data Base, including release notes and detailed methodology, please visit https://www.census.gov/programs-surveys/international-programs/about/idb.html

* [Variables:](https://www.census.gov/data/developers/data-sets/popest-popproj/popest/popest-vars.html)
  - AGE:	Single year of age from 0-100+
  - AREA_KM2:	Area in square kilometers
  - FIPS:	FIPS country/area Code _Federal Information Processing Standards_
  - for:	Census API FIPS 'for' clause
  - GENC:	Geopolitical Entities, Names, and Codes ([GENC](https://nsgreg.nga.mil/genc/discovery)) two character country code standard
  - in:	Census API FIPS 'in' clause
  - NAME	Country or area name
  - POP:	Total mid-year population
  - SEX:	Sex _0 = Both Sexes, 1 = Male, 2 = Female_
  - time:	ISO-8601 Date/Time value
  - ucgid	Uniform Census Geography Identifier clause
  - YR	Year
  
The file size is huge as a text file with about 8 million rows. (For Excel, the total number of rows on a worksheet is 1,048,576, about 1 million.) We need to download once but we should read the downloaded file instead of downloading it everytime. Commands in `tidyverse` package works very fast and we can handle the data of this size.

* Recently 2021 version was publishes: https://www.census.gov/data-tools/demo/idb/#/country?YR_ANIM=2021
* New: https://www2.census.gov/programs-surveys/international-programs/about/idb/idbzip.zip
* Old: https://www2.census.gov/programs-surveys/international-programs/about/idb/idbzip.zip

# Analysis using `idbzip`

```{r} 
library(tidyverse) 
```

```{r}
### For the first time, delete # in the following four lines to download the files.
## From the second time, add # to the following four lines to avoid downloading the files.
# idbzip_url <- "https://www2.census.gov/programs-surveys/international-programs/about/idb/idbzip.zip" # URL of the zip file.
# dir.create("./idbzip") # store everything in idbzip directory in the working directory
# download.file(url = idbzip_url, destfile = "idbzip/idbzip.zip") # file size: 43.1 MB
# unzip("./idbzip/idbzip.zip", exdir = "./idbzip") # zip file contains three files idb5yr.all, idbsingleyear.all, Readme.txt
```

```{r}
idb <- read_delim("./idbzip/idbsingleyear.all", delim = "|")
glimpse(idb)
idb
```

## Popultion of the World

```{r}
world_all <- idb %>% 
  select("YEAR" = `#YR`, SEX, POP, AGE) %>%
  mutate(SEX = as_factor(SEX))
world <- world_all %>% 
  group_by(YEAR, SEX) %>%
  summarize(POPULATION = sum(POP))
world
```

```{r}
world %>% ggplot(aes(x = YEAR, y = POPULATION)) +
  geom_line(aes(color = SEX)) + 
  geom_vline(xintercept = 2020)
```

Something is wrong! Let's check the missing data.

```{r}
world_all %>% group_by(YEAR) %>% summarize(MISSING = sum(is.na(POP)))
```

```{r}
countries <- idb %>% 
  select("YEAR" = `#YR`, SEX, GENC, POP) %>%
  mutate(SEX = as_factor(SEX)) %>% filter(SEX == 0) %>%
  group_by(YEAR, GENC) %>%
  summarize(POPULATION = sum(POP)) %>%
  ungroup() %>%
  group_by(YEAR) %>% 
  summarize(NUMBER = n())
```
```{r}
countries
summary(countries)
ggplot(countries, aes(x = YEAR, y = NUMBER)) +
  geom_bar(stat = "identity")
```


## Population of a Country, JAPAN

```{r}
japan <- filter(idb, GENC == "JP") %>% select("YEAR" = `#YR`, SEX, POP, AGE) %>%
  mutate(SEX = as_factor(SEX))
japan
```
```{r}
pop <- japan %>% group_by(YEAR, SEX) %>% summarize(POPULATION = sum(POP)) 
pop
```

```{r}
pop %>% ggplot(aes(x = YEAR, y = POPULATION)) +
  geom_line(aes(color = SEX)) + 
  geom_vline(xintercept = 2020)
```
```{r}
japan2020 <- japan %>% filter(YEAR == 2020, SEX == 0)
ggplot(japan2020) +
  geom_bar(aes(x = AGE, y = POP), stat = "identity") 
```

```{r}
japan_adult <- filter(japan2020, AGE >=18) 
ggplot(japan_adult) +
  geom_line(aes(x = AGE, y = cumsum(POP)/sum(POP)*100)) + 
  geom_vline(xintercept = 40, color = "red")
```

<!-- * [Japan’s Enforcing of Same Surnames for Couples Has Only a Short History](https://www.nippon.com/en/japan-data/h00542/japan’s-enforcing-of-same-surnames-for-couples-has-only-a-short-history.html) -->

# Population Pyramid

* https://www.populationpyramid.net/world/2019/
* ggplot2: https://rpubs.com/walkerke/pyramids_ggplot2
	- US Census: https://cran.r-project.org/web/packages/idbr/idbr.pdf
	- https://cran.r-project.org/web/packages/idbr/index.html


## Population Pyramid of Japan or Other Countries

### Japan

```{r}
yr <- 2020
country <- "Japan"
filter(idb, NAME == country) %>% 
  select("YEAR" = `#YR`, SEX, POP, AGE) %>%
  mutate(SEX = fct_recode(as_factor(SEX), "Both Sex" = "0", "Male" = "1", "Female" = "2"), POP = POP/1000) %>%
  filter(YEAR == yr, SEX != "Both Sex") %>% 
  ggplot(aes(x = AGE, y = ifelse(SEX == "Male", -POP, POP), fill = SEX)) + 
  geom_bar(stat = "identity") + 
  coord_flip() +
  labs(title = paste("Population Pyramid of", country, yr), 
       subtitle = "population unit in 1000") +
  scale_y_continuous(breaks = seq(-1000, 1000, 500), 
                     labels = as.character(c(1000, 500, 0, 500, 1000))) +
  ylab("Male vs Female") + 
  scale_fill_brewer(palette = "Set2")
```

### Slovenia

```{r}
yr <- 2020
country <- "Slovenia"
filter(idb, NAME == country) %>% 
  select("YEAR" = `#YR`, SEX, POP, AGE) %>%
  mutate(SEX = fct_recode(as_factor(SEX), "Both Sex" = "0", "Male" = "1", "Female" = "2"), POP = POP/1000) %>%
  filter(YEAR == yr, SEX != "Both Sex") %>% 
  ggplot(aes(x = AGE, y = ifelse(SEX == "Male", -POP, POP), fill = SEX)) + 
  geom_bar(stat = "identity") + 
  coord_flip() +
  labs(title = paste("Population Pyramid of", country, yr), 
       subtitle = "population unit in 1000") +
  scale_y_continuous(breaks = seq(-1000, 1000, 500), 
                     labels = as.character(c(1000, 500, 0, 500, 1000))) +
  ylab("Male vs Female") + 
  scale_fill_brewer(palette = "Set2")
```

### Kenya

```{r}
yr <- 2020
country <- "Kenya"
filter(idb, NAME == country) %>% 
  select("YEAR" = `#YR`, SEX, POP, AGE) %>%
  mutate(SEX = fct_recode(as_factor(SEX), "Both Sex" = "0", "Male" = "1", "Female" = "2"), POP = POP/1000) %>%
  filter(YEAR == yr, SEX != "Both Sex") %>% 
  ggplot(aes(x = AGE, y = ifelse(SEX == "Male", -POP, POP), fill = SEX)) + 
  geom_bar(stat = "identity") + 
  coord_flip() +
  labs(title = paste("Population Pyramid of", country, yr), 
       subtitle = "population unit in 1000") +
  scale_y_continuous(breaks = seq(-1000, 1000, 500), 
                     labels = as.character(c(1000, 500, 0, 500, 1000))) +
  ylab("Male vs Female") + 
  scale_fill_brewer(palette = "Set2")
```

End of Analysis
