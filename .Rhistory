json_data <- read_json(path='data/SAFI.json')
source("~/Documents/computer/r/_lectures/intro2r/r4ss.Rmd")
View(interviews2)
Sys.Date()
Sys.setevn(LANG = "en")
Sys.setev(LANG = "en")
Sys.setenv(LANG = "en")
install.packages("learnr")
1+1
Sys.date()
Sys.Date()
Sys.setenv(LANG = "en")
if( !("installr" %in% installed.packages()) ){install.packages("installr")}
installr::updateR(TRUE)
install.packages("rmarkdown", "tidyverse")
install.packages("rmarkdown", "tidyverse")
install.packages(c("rmarkdown", "tidyverse"))
install.packages(c("rmarkdown", "tidyverse"))
Sys.setenv(LANG = "en")
df_iris <- datasets::iris
View(df_iris)
head(df_iris)
head(df_iris)
df_iris
df_iris
library(tidyverse)
df_iris
as_tibble(df_iris)
str(df_iris)
glimpse(df_iris)
summary(df_iris)
plot(x = df_iris$Sepal.Length, y = df_iris$Sepal.Width)
plot(x = df_iris$Sepal.Length, y = df_iris$Sepal.Width, main = "Scatter Plot of Sepal Data of Iris", xlab = "Sepal Length", ylab = "Sepal Width")
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
labs(title = "Scatter Plot of Sepal Data of Iris", x = "Sepal Length", y = "Sepal Width")
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram(bins = 10)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, color = Species)) +
geom_freqpoly()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Species)) +
geom_boxplot()
hist(x = df_iris$Sepal.Length)
boxplot(x = df_iris$Sepal.Length)
boxplot(x = df_iris$Sepal.Length, subset = Species)
boxplot(x = df_iris$Sepal.Length, subset = df_iris$Species)
boxplot(x = df_iris$Sepal.Length ~ df_iris$Species)
boxplot(Sepal.Length ~ Species, data = df_iris)
plot(x = df_iris$Sepal.Length, y = df_iris$Sepal.Width,
main = "Scatter Plot of Sepal Data of Iris",
xlab = "Sepal Length", ylab = "Sepal Width")
View(df_iris)
df_iris <- datasets::iris
typeof(df_iris)
df_iris <- datasets::iris
classof(df_iris)
df_iris <- datasets::iris
class(df_iris)
df_iris <- datasets::iris
typeof(df_iris)
df_iris <- datasets::iris
class(df_iris)
df_iris <- datasets::iris
class(df_iris)
tbl_iris <- as_tibble(datasets::iris)
class(tbl_iris)
library(tidyverse)
df_iris <- datasets::iris
class(df_iris)
tbl_iris <- as_tibble(datasets::iris)
class(tbl_iris)
df_iris
slice(df_iris, 1:10)
11+2
1:10
seq(1,10, by = 2)
glimpse(df_iris)
typeof(df_iris$Species)
class(df_iris$Species)
typeof(df_iris$Sepal.Length)
class(df_iris$Sepal.Length)
summary(df_iris)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
labs(title = "Scatter Plot of Sepal Data of Iris", x = "Sepal Length", y = "Sepal Width")
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram(bins = 10)
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_violin()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_jitter(width = 0.2)
ggplot(data = df_iris, aes(x = Sepal.Length, fill = Species)) +
geom_density(alpha = 0.5)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
lm(Sepal.Width ~ Sepal.Length, data = df_iris)
lm(Sepal.Width ~ Sepal.Length, data = df_iris) %>% summary()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(aes(color = Species)) +
geom_smooth(aes(color = Species), formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula =  y ~ x, method = "lm", se = FALSE, color = "black", linetype = "twodash", size = 1.5)
library(tidyverse)
url_class <- "https://databankfiles.worldbank.org/data/download/site-content/CLASS.xlsx"
download.file(url = url_class, destfile = "data/CLASS.xlsx")
library(readxl)
wb_countries_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =219)
wb_countries <- wb_countries_tmp %>%
select(country = Economy, iso3c = Code, region = Region, income = `Income group`, lending = "Lending category", other = "Other (EMU or HIPC)")
wb_countries
wb_regions_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =266) %>%
slice(-(1:220))
wb_regions <- wb_regions_tmp %>%
select(region = Economy, iso3c = Code) %>% drop_na()
wb_regions
library(WDI)
install.packages("WDI")
Sys.setenv(LANG = "en")
library(tidyverse)
df_iris <- datasets::iris
class(df_iris)
tbl_iris <- as_tibble(datasets::iris)
class(tbl_iris)
df_iris
slice(df_iris, 1:10)
11+2
1:10
seq(1,10, by = 2)
glimpse(df_iris)
typeof(df_iris$Species)
class(df_iris$Species)
typeof(df_iris$Sepal.Length)
class(df_iris$Sepal.Length)
summary(df_iris)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
labs(title = "Scatter Plot of Sepal Data of Iris", x = "Sepal Length", y = "Sepal Width")
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram(bins = 10)
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_violin()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_jitter(width = 0.2)
ggplot(data = df_iris, aes(x = Sepal.Length, fill = Species)) +
geom_density(alpha = 0.5)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
lm(Sepal.Width ~ Sepal.Length, data = df_iris)
lm(Sepal.Width ~ Sepal.Length, data = df_iris) %>% summary()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(aes(color = Species)) +
geom_smooth(aes(color = Species), formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula =  y ~ x, method = "lm", se = FALSE, color = "black", linetype = "twodash", size = 1.5)
library(tidyverse)
url_class <- "https://databankfiles.worldbank.org/data/download/site-content/CLASS.xlsx"
download.file(url = url_class, destfile = "data/CLASS.xlsx")
library(readxl)
wb_countries_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =219)
wb_countries <- wb_countries_tmp %>%
select(country = Economy, iso3c = Code, region = Region, income = `Income group`, lending = "Lending category", other = "Other (EMU or HIPC)")
wb_countries
wb_regions_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =266) %>%
slice(-(1:220))
wb_regions <- wb_regions_tmp %>%
select(region = Economy, iso3c = Code) %>% drop_na()
wb_regions
library(WDI)
WDIsearch(string = "NY.GDP.PCAP.KD",
field = "indicator", cache = NULL)
WDIsearch(string = "NY.GDP.PCAP.KD",
field = "indicator", short = FALSE, cache = NULL)
WDIsearch(string = "gdp per capita",
field = "name", cache = NULL)
WDIsearch(string = "6.0.GDP_current", field = "indicator", short = FALSE)
WDIsearch(string = "EN.ATM.CO2E.PC", field = "indicator", short = FALSE)
WDIsearch(string = "population, total", field = "name", short = FALSE)
WDIsearch(string = "SP.POP.TOTL", field = "indicator", short = FALSE)
gdpcap <- WDI(country = "all", indicator = "NY.GDP.PCAP.KD")
gdpcap
write_csv(gdpcap, "data/gdpcap.csv")
gdpcap_co2 <- WDI(country = "all", indicator = c("NY.GDP.PCAP.KD", "EN.ATM.CO2E.PC"), extra = TRUE)
gdpcap_co2
write_csv(gdpcap_co2, "data/gdpcap_co2.csv")
gdpcap <- read_csv("data/gdpcap.csv")
gdpcap
summary(gdpcap)
gdpcap %>% distinct(country, iso2c)
gdpcap %>% filter(country == "World") %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD)) +
geom_line()
gdpcap %>% filter(iso2c %in% c("BR", "RU", "IN", "CN")) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) +
geom_line() +
labs(title = "GDP per capta of BRICs", y = "GDP per capita (constant 2015 US$)")
wb_countries %>% filter(income == "Low income")
gdpcap_co2 <- read_csv("data/gdpcap_co2.csv")
gdpcap_co2
summary(gdpcap_co2)
gdpcap_co2 %>% filter(year == 2021) %>%
ggplot(aes(x = NY.GDP.PCAP.KD, y = EN.ATM.CO2E.PC)) +
geom_point()
gdpcap_co2 %>% filter(region != "Aggregates", year == "2021")
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(NY.GDP.PCAP.KD), !is.na(EN.ATM.CO2E.PC)) %>%
group_by(year) %>% summarize(n = n())
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(NY.GDP.PCAP.KD), !is.na(EN.ATM.CO2E.PC), year == 2019) %>%
ggplot(aes(x = NY.GDP.PCAP.KD, y = EN.ATM.CO2E.PC)) +
geom_point()
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(NY.GDP.PCAP.KD), !is.na(EN.ATM.CO2E.PC), year == 2019) %>%
ggplot(aes(x = log10(NY.GDP.PCAP.KD), y = log10(EN.ATM.CO2E.PC))) +
geom_point()
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", !is.na(gdp), !is.na(co2), year == 2019)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = bquote(~CO[2]~ "Log10 Scale Plot of "~CO[2]~" Emission Per Capita Against GDP Per Capitain 2019"),
subtitle = bquote(~CO[2]~": metric tons per capita, GDP: constant 2015 US$"),
x = bquote(~CO[2]~ "Emission Per Capita (Log10))"), y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
summary(gdpco2_2019)
lm(log10(co2) ~ log10(gdp), data = gdpco2_2019) %>% summary()
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
gdpco2log_sse <- sum((log10(gdpco2_2019$co2) - gdpco2log_model$fitted.values)^2)
(gdpco2log_rse <- sqrt(gdpco2log_sse/182))
gdpco2log_ssyy <- sum((log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2)))^2)
1-gdpco2log_sse/gdpco2log_ssyy
(low_countries <- wb_countries %>% filter(income == "Low income"))
gdpcap %>% semi_join(low_countries, by = iso3c)
semi_join(gdpcap, low_countries, by = iso3c)
semi_join(gdpcap, low_countries)
semi_join(gdpcap, low_countries) %>% nrow()
semi_join(gdpcap, low_countries) %>% distinct(iso3c) %>% nrow()
(gdpcap_low <- semi_join(gdpcap, low_countries)
(gdpcap_low <- semi_join(gdpcap, low_countries))
gdpcap_low %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) +
geom_line() +
labs(title = "GDP per capta of Low income countries", y = "GDP per capita (constant 2015 US$)")
365*1.9
gdpcap_co2 <- read_csv("data/gdpcap_co2.csv")
gdpcap_co2
co2 <- gdpcap_co2 %>%
select(country, iso2c, iso3c, year, co2 = EN.ATM.CO2E.PC, region)
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russia"))
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russia Federation"))
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russia Federation"))
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation"))
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>% distinct(country)
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>%
ggplot(aes(x = year, y = co2, color = country)) + geom_line()
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>%
filter(!is.na(co2)) %>%
ggplot(aes(x = year, y = co2, color = country)) + geom_line()
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>%
filter(!is.na(co2)) %>%
ggplot(aes(x = year, y = co2, color = country)) + geom_line() +
labs(title = "CO2 Emission Per Capita of G8 Countries")
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>% distinct(country, iso2c, iso3c, region)
url_class <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
download.file(url = url_class, destfile = "data/pop.csv")
pop <- read_csv("data/pop.csv")
View(pop)
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
download.file(url = url, destfile = "data/pop.csv", skip = 1)
pop <- read_csv("data/pop.csv")
View(pop)
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
download.file(url = url, destfile = "data/pop.csv", skip = 1)
pop <- read_csv("data/pop.csv")
pop
(pop <- read_csv("url"))
(pop <- read_csv("https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"))
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
(pop <- read_csv(url))
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
(pop <- read_csv(url, skip = 1))
library(tidyverse)
df_iris <- datasets::iris
class(df_iris)
tbl_iris <- as_tibble(datasets::iris)
class(tbl_iris)
df_iris
slice(df_iris, 1:10)
11+2
1:10
seq(1,10, by = 2)
glimpse(df_iris)
typeof(df_iris$Species)
class(df_iris$Species)
typeof(df_iris$Sepal.Length)
class(df_iris$Sepal.Length)
summary(df_iris)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
labs(title = "Scatter Plot of Sepal Data of Iris", x = "Sepal Length", y = "Sepal Width")
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram(bins = 10)
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_violin()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_jitter(width = 0.2)
ggplot(data = df_iris, aes(x = Sepal.Length, fill = Species)) +
geom_density(alpha = 0.5)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
lm(Sepal.Width ~ Sepal.Length, data = df_iris)
lm(Sepal.Width ~ Sepal.Length, data = df_iris) %>% summary()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(aes(color = Species)) +
geom_smooth(aes(color = Species), formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula =  y ~ x, method = "lm", se = FALSE, color = "black", linetype = "twodash", size = 1.5)
library(tidyverse)
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv" # long file name
(pop <- read_csv(url))
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
(pop <- read_csv(url, skip = 1))
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
download.file(url = url, destfile = "data/pop.csv", skip = 1)
pop <- read_csv("data/pop.csv")
pop
url_class <- "https://databankfiles.worldbank.org/data/download/site-content/CLASS.xlsx"
download.file(url = url_class, destfile = "data/CLASS.xlsx")
library(readxl)
wb_countries_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =219)
wb_countries <- wb_countries_tmp %>%
select(country = Economy, iso3c = Code, region = Region, income = `Income group`, lending = "Lending category", other = "Other (EMU or HIPC)")
wb_countries
wb_regions_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =266) %>%
slice(-(1:220))
wb_regions <- wb_regions_tmp %>%
select(region = Economy, iso3c = Code) %>% drop_na()
wb_regions
library(WDI)
WDIsearch(string = "NY.GDP.PCAP.KD",
field = "indicator", cache = NULL)
WDIsearch(string = "NY.GDP.PCAP.KD",
field = "indicator", short = FALSE, cache = NULL)
WDIsearch(string = "gdp per capita",
field = "name", cache = NULL)
WDIsearch(string = "6.0.GDP_current", field = "indicator", short = FALSE)
WDIsearch(string = "EN.ATM.CO2E.PC", field = "indicator", short = FALSE)
WDIsearch(string = "population, total", field = "name", short = FALSE)
WDIsearch(string = "SP.POP.TOTL", field = "indicator", short = FALSE)
gdpcap <- WDI(country = "all", indicator = "NY.GDP.PCAP.KD")
gdpcap
write_csv(gdpcap, "data/gdpcap.csv")
gdpcap_co2 <- WDI(country = "all", indicator = c("NY.GDP.PCAP.KD", "EN.ATM.CO2E.PC"), extra = TRUE)
gdpcap_co2
write_csv(gdpcap_co2, "data/gdpcap_co2.csv")
gdpcap <- read_csv("data/gdpcap.csv")
gdpcap
summary(gdpcap)
gdpcap %>% distinct(country, iso2c)
gdpcap %>% filter(country == "World") %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD)) +
geom_line()
gdpcap %>% filter(iso2c %in% c("BR", "RU", "IN", "CN")) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) +
geom_line() +
labs(title = "GDP per capta of BRICs", y = "GDP per capita (constant 2015 US$)")
(low_countries <- wb_countries %>% filter(income == "Low income"))
(gdpcap_low <- semi_join(gdpcap, low_countries))
gdpcap_low %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) +
geom_line() +
labs(title = "GDP per capta of low income countries", y = "GDP per capita (constant 2015 US$)")
gdpcap_co2 <- read_csv("data/gdpcap_co2.csv")
gdpcap_co2
co2 <- gdpcap_co2 %>%
select(country, iso2c, iso3c, year, co2 = EN.ATM.CO2E.PC, region)
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>% distinct(country, iso2c, iso3c, region)
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>%
filter(!is.na(co2)) %>%
ggplot(aes(x = year, y = co2, color = country)) + geom_line() +
labs(title = "CO2 Emission Per Capita of G8 Countries")
gdpcap_co2 <- read_csv("data/gdpcap_co2.csv")
gdpcap_co2
summary(gdpcap_co2)
gdpcap_co2 %>% filter(year == 2021) %>%
ggplot(aes(x = NY.GDP.PCAP.KD, y = EN.ATM.CO2E.PC)) +
geom_point()
gdpcap_co2 %>% filter(region != "Aggregates", year == "2021")
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(NY.GDP.PCAP.KD), !is.na(EN.ATM.CO2E.PC)) %>%
group_by(year) %>% summarize(n = n())
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(NY.GDP.PCAP.KD), !is.na(EN.ATM.CO2E.PC), year == 2019) %>%
ggplot(aes(x = NY.GDP.PCAP.KD, y = EN.ATM.CO2E.PC)) +
geom_point()
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(NY.GDP.PCAP.KD), !is.na(EN.ATM.CO2E.PC), year == 2019) %>%
ggplot(aes(x = log10(NY.GDP.PCAP.KD), y = log10(EN.ATM.CO2E.PC))) +
geom_point()
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", !is.na(gdp), !is.na(co2), year == 2019)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = bquote(~CO[2]~ "Log10 Scale Plot of "~CO[2]~" Emission Per Capita Against GDP Per Capitain 2019"),
subtitle = bquote(~CO[2]~": metric tons per capita, GDP: constant 2015 US$"),
x = bquote(~CO[2]~ "Emission Per Capita (Log10))"), y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
summary(gdpco2_2019)
lm(log10(co2) ~ log10(gdp), data = gdpco2_2019) %>% summary()
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
gdpco2log_sse <- sum((log10(gdpco2_2019$co2) - gdpco2log_model$fitted.values)^2)
(gdpco2log_rse <- sqrt(gdpco2log_sse/182))
gdpco2log_ssyy <- sum((log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2)))^2)
1-gdpco2log_sse/gdpco2log_ssyy
gdpco2log_ssxx <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))^2)
gdpco2log_ssxx <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))^2)
gdpco2log_ssxy <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))*(log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2))))
gdpco2log_ssxx <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))^2)
gdpco2log_ssxy <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))*(log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2))))
(gdpco2log_slope = gdpco2log_ssxy/gdpco2log_ssxx)
gdpco2log_ssxx <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))^2)
gdpco2log_ssxy <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))*(log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2))))
(gdpco2log_slope <- gdpco2log_ssxy/gdpco2log_ssxx)
(gdpco2log_intercept <- mean(log10(gdpco2_2019$co2)) - gdpco2log_slope*mean(log10(gdpco2_2019$gdp)))
gdpco2log_ssxx <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))^2)
gdpco2log_ssxy <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))*(log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2))))
gdpco2log_slope <- gdpco2log_ssxy/gdpco2log_ssxx
gdpco2log_intercept <- mean(log10(gdpco2_2019$co2)) - gdpco2log_slope*mean(log10(gdpco2_2019$gdp))
c(Intercept = gdpco2log_intercept, Slope = gdpco2log_slope)
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
gdpco2log_sse <- sum((log10(gdpco2_2019$co2) - gdpco2log_model$fitted.values)^2)
(gdpco2log_rse <- sqrt(gdpco2log_sse/182))
gdpco2log_ssyy <- sum((log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2)))^2)
1-gdpco2log_sse/gdpco2log_ssyy
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
download.file(url = url, destfile = "data/pop.csv", skip = 1)
pop <- read_csv("data/pop.csv")
pop
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
download.file(url = url, destfile = "data/pop.csv")
pop <- read_csv("data/pop.csv", skip = 1)
pop
library(tidyverse)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + facet_grid(cols = Species)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + facet_grid(cols = Species)
df_iris
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + facet_grid(cols = vars(Species))
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + facet_grid(cols = vars(Species))
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
df_iris
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
plot(cars)
plot(cars)
source("~/Documents/_class/gsclasses/2022/intro_R/intro2r/etra.R")
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
library(tidyverse)
df_iris
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + facet_grid(cols = vars(Species))
plot(cars)
plot(cars)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + facet_grid(cols = vars(Species))
source("~/Documents/_class/gsclasses/2022/intro_R/intro2r/etra.R")
