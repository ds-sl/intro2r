gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0) %>%
ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of Co2 Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = "Co2 Emission Per Capita (Log10)", y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, col = "red")
gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0) %>%
ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of Co2 Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = "Co2 Emission Per Capita (Log10)", y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0) %>%
lm(log10(co2) ~ log10(gdp)) > summary()
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
lm(log10(co2) ~ log10(gdp), data = gdp2_2019) > summary()
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
lm(log10(co2) ~ log10(gdp), data = gdpco2_2019) > summary()
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
lm(log10(co2) ~ log10(gdp), data = gdpco2_2019) %>% summary()
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of Co2 Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = "Co2 Emission Per Capita (Log10)", y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
lm(log10(co2) ~ log10(gdp), data = gdpco2_2019) %>% summary()
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of Co2 Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = "$CO_2$ Emission Per Capita (Log10)", y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of Co2 Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = "CO<SUB>2</SUB> Emission Per Capita (Log10)", y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of bquote(CO_2) Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = "CO2 Emission Per Capita (Log10)", y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of bquote(CO_2) Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = "bquote(CO_2) Emission Per Capita (Log10)", y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
library(ggplot2)
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of bquote(CO_2) Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = "bquote(CO_2) Emission Per Capita (Log10)", y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of base::bquote(CO_2) Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = "bquote(CO_2) Emission Per Capita (Log10)", y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of base::bquote(CO_2) Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = bquote("CO_2 Emission Per Capita (Log10)"), y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of base::bquote(CO_2) Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = bquote(CO_2 "Emission Per Capita (Log10)"), y = "GDP Per Capita (Log10)") +
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of base::bquote(CO_2) Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = bquote("CO_2 "Emission Per Capita (Log10)"), y = "GDP Per Capita (Log10)") +
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of CO_2 Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = "CO_2 Emission Per Capita (Log10))", y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of CO_2 Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = "CO_2 Emission Per Capita (Log10))", y = bquote("Vc[max] ("*mu~ "mol" ~CO[2]~ m^-2~s^-1*")")) +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of CO_2 Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = bquote(~CO[2]~ "Emission Per Capita (Log10))"), y = bquote("Vc[max] ("*mu~ "mol" ~CO[2]~ m^-2~s^-1*")")) +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = "Log10 Scale Plot of CO_2 Emission Per Capita Against GDP Per Capita",
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = bquote(~CO[2]~ "Emission Per Capita (Log10))"), y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = bquote(~CO[2]~ "Log10 Scale Plot of CO_2 Emission Per Capita Against GDP Per Capita"),
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = bquote(~CO[2]~ "Emission Per Capita (Log10))"), y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = bquote(~CO[2]~ "Log10 Scale Plot of "~CO[2]~" Emission Per Capita Against GDP Per Capita"),
subtitle = "CO2: metric tons per capita, GDP: constant 2015 US$",
x = bquote(~CO[2]~ "Emission Per Capita (Log10))"), y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = bquote(~CO[2]~ "Log10 Scale Plot of "~CO[2]~" Emission Per Capita Against GDP Per Capita"),
subtitle = bquote(~CO[2]~ "CO2: metric tons per capita, GDP: constant 2015 US$"),
x = bquote(~CO[2]~ "Emission Per Capita (Log10))"), y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = bquote(~CO[2]~ "Log10 Scale Plot of "~CO[2]~" Emission Per Capita Against GDP Per Capita"),
subtitle = bquote(~CO[2]~": metric tons per capita, GDP: constant 2015 US$"),
x = bquote(~CO[2]~ "Emission Per Capita (Log10))"), y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = bquote(~CO[2]~ "Log10 Scale Plot of "~CO[2]~" Emission Per Capita Against GDP Per Capitain 2019"),
subtitle = bquote(~CO[2]~": metric tons per capita, GDP: constant 2015 US$"),
x = bquote(~CO[2]~ "Emission Per Capita (Log10))"), y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
summary(gdpco2_2019)
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
summary(log10(gdp) - gdpco2log_model$fitted.values)
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
summary(log10(gdpco2_2019$gdp) - gdpco2log_model$fitted.values)
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
summary(log10(gdpco2_2019$co2) - gdpco2log_model$fitted.values)
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
sum((log10(gdpco2_2019$co2) - gdpco2log_model$fitted.values)^2)
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
sqrt(sum((log10(gdpco2_2019$co2) - gdpco2log_model$fitted.values)^2)/182)
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
sqrt(sum((log10(gdpco2_2019$co2) - gdpco2log_model$fitted.values)^2)/182)
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
(gdpco2log_rse <- sqrt(sum((log10(gdpco2_2019$co2) - gdpco2log_model$fitted.values)^2)/182))
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
(gdpco2log_sse <- sum((log10(gdpco2_2019$co2) - gdpco2log_model$fitted.values)^2))
(gdpco2log_rse <- sqrt(gdpco2log_sse/182))
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
gdpco2log_sse <- sum((log10(gdpco2_2019$co2) - gdpco2log_model$fitted.values)^2)
(gdpco2log_rse <- sqrt(gdpco2log_sse/182))
gdpco2log_ssyy <- sum(log10(gdpco2_2019$co2)^2)
1-gdpco2log_sse/gdpco2log_ssyy
gdpco2log_ssyy <- sum(log10(gdpco2_2019$co2 - mean(gdpco2_2019$co2))^2)
1-gdpco2log_sse/gdpco2log_ssyy
gdpco2log_ssyy <- sum(log10(gdpco2_2019$co2 - mean(log10(gdpco2_2019$co2)))^2)
1-gdpco2log_sse/gdpco2log_ssyy
mean(log10(gdpco2_2019$co2)
mean(log10(gdpco2_2019$co2))
gdpco2log_ssyy <- sum(log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2))^2)
1-gdpco2log_sse/gdpco2log_ssyy
gdpco2log_ssyy <- sum((log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2)))^2)
1-gdpco2log_sse/gdpco2log_ssyy
R.version
R.Version
R.version.string
R.version.string()
R.version.string
View(df_iris)
11+2
11+2
df_iris[[5]]
typeof(df_iris[[5]])
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
labs(title = "Scatter Plot of Sepal Data of Iris", x = "Sepal Length", y = "Sepal Width")
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram(bins = 10)
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_violin()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_jitter(width = 0.2)
ggplot(data = df_iris, aes(x = Sepal.Length, fill = Species)) +
geom_density(alpha = 0.5)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
lm(Sepal.Width ~ Sepal.Length, data = df_iris)
lm(Sepal.Width ~ Sepal.Length, data = df_iris) %>% summary()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(aes(color = Species)) +
geom_smooth(aes(color = Species), formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula =  y ~ x, method = "lm", se = FALSE, color = "black", linetype = "twodash", size = 1.5)
seq(1,10, by = 2)
library(readxl)
wb_countries_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =219)
url_class <- "https://databankfiles.worldbank.org/data/download/site-content/CLASS.xlsx"
download.file(url = url_class, destfile = "data/CLASS.xlsx")
library(readxl)
wb_countries_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =219)
wb_countries <- wb_countries_tmp %>%
select(country = Economy, iso3c = Code, region = Region, income = `Income group`, lending = "Lending category", other = "Other (EMU or HIPC)")
wb_countries
wb_regions_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =266) %>%
slice(-(1:220))
wb_regions <- wb_regions_tmp %>%
select(region = Economy, iso3c = Code) %>% drop_na()
wb_regions
library(WDI)
install.packages("WDI")
install.packages("WDI")
library(WDI)
library(WDI)
WDIsearch(string = "NY.GDP.PCAP.KD",
field = "indicator", cache = NULL)
WDIsearch(string = "NY.GDP.PCAP.KD",
field = "indicator", short = FALSE, cache = NULL)
gdpcap <- WDI(country = "all", indicator = "NY.GDP.PCAP.KD")
gdpcap
write_csv(gdpcap, "data/gdpcap.csv")
library(tidyverse)
df_iris <- datasets::iris
class(df_iris)
tbl_iris <- as_tibble(datasets::iris)
class(tbl_iris)
df_iris
slice(df_iris, 1:10)
11+2
1:10
seq(1,10, by = 2)
glimpse(df_iris)
typeof(df_iris$Species)
class(df_iris$Species)
typeof(df_iris$Sepal.Length)
class(df_iris$Sepal.Length)
summary(df_iris)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
labs(title = "Scatter Plot of Sepal Data of Iris", x = "Sepal Length", y = "Sepal Width")
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram(bins = 10)
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_violin()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_jitter(width = 0.2)
ggplot(data = df_iris, aes(x = Sepal.Length, fill = Species)) +
geom_density(alpha = 0.5)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
lm(Sepal.Width ~ Sepal.Length, data = df_iris)
lm(Sepal.Width ~ Sepal.Length, data = df_iris) %>% summary()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(aes(color = Species)) +
geom_smooth(aes(color = Species), formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula =  y ~ x, method = "lm", se = FALSE, color = "black", linetype = "twodash", size = 1.5)
library(tidyverse)
url_class <- "https://databankfiles.worldbank.org/data/download/site-content/CLASS.xlsx"
download.file(url = url_class, destfile = "data/CLASS.xlsx")
library(readxl)
wb_countries_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =219)
wb_countries <- wb_countries_tmp %>%
select(country = Economy, iso3c = Code, region = Region, income = `Income group`, lending = "Lending category", other = "Other (EMU or HIPC)")
wb_countries
wb_regions_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =266) %>%
slice(-(1:220))
wb_regions <- wb_regions_tmp %>%
select(region = Economy, iso3c = Code) %>% drop_na()
wb_regions
library(WDI)
library(WDI)
WDIsearch(string = "NY.GDP.PCAP.KD",
field = "indicator", cache = NULL)
WDIsearch(string = "NY.GDP.PCAP.KD",
field = "indicator", short = FALSE, cache = NULL)
WDIsearch(string = "gdp per capita",
field = "name", cache = NULL)
gdpcap <- WDI(country = "all", indicator = "NY.GDP.PCAP.KD")
gdpcap
write_csv(gdpcap, "data/gdpcap.csv")
WDIsearch(string = "6.0.GDP_current", field = "indicator", short = FALSE)
WDIsearch(string = "SP.POP.TOTL", field = "indicator", short = FALSE)
WDIsearch(string = "EN.ATM.CO2E.PC", field = "indicator", short = FALSE)
gdpcap_co2 <- WDI(country = "all", indicator = c("NY.GDP.PCAP.KD", "EN.ATM.CO2E.PC"), extra = TRUE)
gdpcap_co2
write_csv(gdpcap_co2, "data/gdpcap_co2.csv")
gdpcap_co2 <- read_csv("data/gdpcap_co2.csv")
gdpcap_co2
summary(gdpcap_co2)
gdpcap_co2 %>% filter(region != "Aggregates") %>%
ggplot(aes(year)) + geom_histogram()
gdpcap_co2 %>% filter(region != "Aggregates", year == 2019) %>%
ggplot(aes(x = NY.GDP.PCAP.KD, y = EN.ATM.CO2E.PC)) +
geom_point()
gdpcap_co2 %>% filter(region != "Aggregates", year == 2019) %>%
ggplot(aes(x = log10(NY.GDP.PCAP.KD), y = log10(EN.ATM.CO2E.PC))) +
geom_point()
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", year == 2019, gdp >0, co2>0)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = bquote(~CO[2]~ "Log10 Scale Plot of "~CO[2]~" Emission Per Capita Against GDP Per Capitain 2019"),
subtitle = bquote(~CO[2]~": metric tons per capita, GDP: constant 2015 US$"),
x = bquote(~CO[2]~ "Emission Per Capita (Log10))"), y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
summary(gdpco2_2019)
lm(log10(co2) ~ log10(gdp), data = gdpco2_2019) %>% summary()
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
gdpco2log_sse <- sum((log10(gdpco2_2019$co2) - gdpco2log_model$fitted.values)^2)
(gdpco2log_rse <- sqrt(gdpco2log_sse/182))
gdpco2log_ssyy <- sum((log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2)))^2)
1-gdpco2log_sse/gdpco2log_ssyy
WDIsearch(string = "6.0.GDP_current", field = "indicator", short = FALSE)
WDIsearch(string = "SP.POP.TOTL", field = "indicator", short = FALSE)
WDIsearch(string = "EN.ATM.CO2E.PC", field = "indicator", short = FALSE)
WDIsearch(string = "SP.POP.TOTL", field = "indicator", short = FALSE)
WDIsearch(string = "total population", field = "name", short = FALSE)
WDIsearch(string = "population, total", field = "name", short = FALSE)
WDIsearch(string = "population total", field = "name", short = FALSE)
WDIsearch(string = "population, total", field = "name", short = FALSE)
WDIsearch(string = "NY.GDP.PCAP.KD",
field = "indicator", short = FALSE, cache = NULL)
WDIsearch(string = "EN.ATM.CO2E.PC", field = "indicator", short = FALSE)
gdpcap <- read_csv("data/gdpcap.csv")
gdpcap
summary(gdpcap)
gdpcap %>% distinct(country)
gdpcap %>% distinct(country, iso2c)
gdpcap %>% filter(country == "World") %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD)) + geom_line()
gdpcap %>% filter(iso2c %in% c("BR", "RU", "ID", "CN", "JP")) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = "country")) + geom_line()
gdpcap %>% filter(iso2c %in% c("BR", "RU", "ID", "CN", "JP")) %>% group_by(country)
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = "country")) + geom_line()
gdpcap %>% filter(iso2c %in% c("BR", "RU", "ID", "CN", "JP")) %>% group_by(country) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = "country")) + geom_line()
gdpcap %>% filter(iso2c %in% c("BR", "RU", "ID", "CN", "JP")) %>%
ggplot() + geom_line(aes(x = year, y = NY.GDP.PCAP.KD, color = "country"))
gdpcap %>% filter(iso2c %in% c("BR", "RU", "ID", "CN", "JP"))
gdpcap %>% filter(iso2c %in% c("BR", "RU", "ID", "CN", "JP")) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) + geom_line()
gdpcap %>% filter(iso2c %in% c("BR", "RU", "ID", "CN")) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) + geom_line()
gdpcap %>% filter(iso2c %in% c("BR", "RU", "ID", "CN")) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) + geom_line() +
labs(title = "GDP per capta of BRICs Countries")
gdpcap %>% filter(iso2c %in% c("BR", "RU", "IN", "CN")) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) + geom_line() +
labs(title = "GDP per capta of BRICs Countries")
gdpcap %>% filter(iso2c %in% c("BR", "RU", "IN", "CN")) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) + geom_line() +
labs(title = "GDP per capta of BRICs Countries")
gdpcap %>% filter(iso2c %in% c("BR", "RU", "IN", "CN")) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) + geom_line() +
labs(title = "GDP per capta of BRICs Countries")
gdpcap %>% filter(iso2c %in% c("BR", "RU", "IN", "CN")) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) + geom_line() +
labs(title = "GDP per capta of BRICs Countries", y = "GDP per capita (constant 2015 US$)")
gdpcap %>% filter(iso2c %in% c("BR", "RU", "IN", "CN")) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) + geom_line() +
labs(title = "GDP per capta of BRICs", y = "GDP per capita (constant 2015 US$)")
gdpcap %>% filter(country == "World") %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD)) +
geom_line()
gdpcap %>% filter(iso2c %in% c("BR", "RU", "IN", "CN")) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) +
geom_line() +
labs(title = "GDP per capta of BRICs", y = "GDP per capita (constant 2015 US$)")
wb_regions_tmp
wb_countries %>% filter(income == "Low income")
wb_countries %>% filter(income == "Low income") %>% unique(iso3c)
wb_countries %>% filter(income == "Low income") %>% distinct(iso3c)
wb_countries %>% filter(income == "Low income")
gdpcap_co2 %>% filter(year == 2021) %>%
ggplot(aes(x = NY.GDP.PCAP.KD, y = EN.ATM.CO2E.PC)) +
geom_point()
gdpcap_co2 %>% filter(region != "Aggregates") %>%
group_by(year) %>% summarize(n = n())
gdpcap_co2 %>% filter(region != "Aggregates", na.rm = TRUE %>%
group_by(year) %>% summarize(n = n())
gdpcap_co2 %>% filter(region != "Aggregates", na.rm = TRUE) %>%
group_by(year) %>% summarize(n = n())
gdpcap_co2 %>% filter(region != "Aggregates", EN.ATM.CO2E.PC >0) %>%
group_by(year) %>% summarize(n = n())
gdpcap_co2 %>% filter(region != "Aggregates", year = 2021)
gdpcap_co2 %>% filter(region != "Aggregates", year = "2021")
gdpcap_co2 %>% filter(region != "Aggregates", year == "2021")
gdpcap_co2 %>% filter(region != "Aggregates", is.na(EN.ATM.CO2E.PC) = FALSE) %>%
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(EN.ATM.CO2E.PC)) %>%
group_by(year) %>% summarize(n = n())
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(EN.ATM.CO2E.PC)) %>%
group_by(year) %>% summarize(n = n())
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(NY.GDP.PCAP.KD), !is.na(EN.ATM.CO2E.PC)) %>%
group_by(year) %>% summarize(n = n())
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(NY.GDP.PCAP.KD), !is.na(EN.ATM.CO2E.PC), year == 2019) %>%
ggplot(aes(x = NY.GDP.PCAP.KD, y = EN.ATM.CO2E.PC)) +
geom_point()
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(NY.GDP.PCAP.KD), !is.na(EN.ATM.CO2E.PC), year == 2019) %>%
ggplot(aes(x = log10(NY.GDP.PCAP.KD), y = log10(EN.ATM.CO2E.PC))) +
geom_point()
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", !is.na(NY.GDP.PCAP.KD), !is.na(EN.ATM.CO2E.PC), year == 2019)
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", !is.na(gdp), !is.na(co2), year == 2019)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = bquote(~CO[2]~ "Log10 Scale Plot of "~CO[2]~" Emission Per Capita Against GDP Per Capitain 2019"),
subtitle = bquote(~CO[2]~": metric tons per capita, GDP: constant 2015 US$"),
x = bquote(~CO[2]~ "Emission Per Capita (Log10))"), y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
available_tutorials(package = NULL)
library(learnr)
available_tutorials(package = NULL)
remotes::install_github("rstudio/learnr")
install_github("rstudio/learnr")
install.packages("remotes")
Sys.setenv(LANG = "en")
remotes::install_github("rstudio/learnr")
remotes::install_github("rstudio/learnr")
