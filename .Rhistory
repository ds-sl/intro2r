(gdpcap_low <- semi_join(gdpcap, low_countries)
(gdpcap_low <- semi_join(gdpcap, low_countries))
gdpcap_low %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) +
geom_line() +
labs(title = "GDP per capta of Low income countries", y = "GDP per capita (constant 2015 US$)")
365*1.9
gdpcap_co2 <- read_csv("data/gdpcap_co2.csv")
gdpcap_co2
co2 <- gdpcap_co2 %>%
select(country, iso2c, iso3c, year, co2 = EN.ATM.CO2E.PC, region)
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russia"))
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russia Federation"))
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russia Federation"))
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation"))
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>% distinct(country)
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>%
ggplot(aes(x = year, y = co2, color = country)) + geom_line()
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>%
filter(!is.na(co2)) %>%
ggplot(aes(x = year, y = co2, color = country)) + geom_line()
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>%
filter(!is.na(co2)) %>%
ggplot(aes(x = year, y = co2, color = country)) + geom_line() +
labs(title = "CO2 Emission Per Capita of G8 Countries")
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>% distinct(country, iso2c, iso3c, region)
url_class <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
download.file(url = url_class, destfile = "data/pop.csv")
pop <- read_csv("data/pop.csv")
View(pop)
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
download.file(url = url, destfile = "data/pop.csv", skip = 1)
pop <- read_csv("data/pop.csv")
View(pop)
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
download.file(url = url, destfile = "data/pop.csv", skip = 1)
pop <- read_csv("data/pop.csv")
pop
(pop <- read_csv("url"))
(pop <- read_csv("https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"))
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
(pop <- read_csv(url))
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
(pop <- read_csv(url, skip = 1))
library(tidyverse)
df_iris <- datasets::iris
class(df_iris)
tbl_iris <- as_tibble(datasets::iris)
class(tbl_iris)
df_iris
slice(df_iris, 1:10)
11+2
1:10
seq(1,10, by = 2)
glimpse(df_iris)
typeof(df_iris$Species)
class(df_iris$Species)
typeof(df_iris$Sepal.Length)
class(df_iris$Sepal.Length)
summary(df_iris)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
labs(title = "Scatter Plot of Sepal Data of Iris", x = "Sepal Length", y = "Sepal Width")
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram(bins = 10)
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_violin()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_jitter(width = 0.2)
ggplot(data = df_iris, aes(x = Sepal.Length, fill = Species)) +
geom_density(alpha = 0.5)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
lm(Sepal.Width ~ Sepal.Length, data = df_iris)
lm(Sepal.Width ~ Sepal.Length, data = df_iris) %>% summary()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(aes(color = Species)) +
geom_smooth(aes(color = Species), formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula =  y ~ x, method = "lm", se = FALSE, color = "black", linetype = "twodash", size = 1.5)
library(tidyverse)
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv" # long file name
(pop <- read_csv(url))
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
(pop <- read_csv(url, skip = 1))
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
download.file(url = url, destfile = "data/pop.csv", skip = 1)
pop <- read_csv("data/pop.csv")
pop
url_class <- "https://databankfiles.worldbank.org/data/download/site-content/CLASS.xlsx"
download.file(url = url_class, destfile = "data/CLASS.xlsx")
library(readxl)
wb_countries_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =219)
wb_countries <- wb_countries_tmp %>%
select(country = Economy, iso3c = Code, region = Region, income = `Income group`, lending = "Lending category", other = "Other (EMU or HIPC)")
wb_countries
wb_regions_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =266) %>%
slice(-(1:220))
wb_regions <- wb_regions_tmp %>%
select(region = Economy, iso3c = Code) %>% drop_na()
wb_regions
library(WDI)
WDIsearch(string = "NY.GDP.PCAP.KD",
field = "indicator", cache = NULL)
WDIsearch(string = "NY.GDP.PCAP.KD",
field = "indicator", short = FALSE, cache = NULL)
WDIsearch(string = "gdp per capita",
field = "name", cache = NULL)
WDIsearch(string = "6.0.GDP_current", field = "indicator", short = FALSE)
WDIsearch(string = "EN.ATM.CO2E.PC", field = "indicator", short = FALSE)
WDIsearch(string = "population, total", field = "name", short = FALSE)
WDIsearch(string = "SP.POP.TOTL", field = "indicator", short = FALSE)
gdpcap <- WDI(country = "all", indicator = "NY.GDP.PCAP.KD")
gdpcap
write_csv(gdpcap, "data/gdpcap.csv")
gdpcap_co2 <- WDI(country = "all", indicator = c("NY.GDP.PCAP.KD", "EN.ATM.CO2E.PC"), extra = TRUE)
gdpcap_co2
write_csv(gdpcap_co2, "data/gdpcap_co2.csv")
gdpcap <- read_csv("data/gdpcap.csv")
gdpcap
summary(gdpcap)
gdpcap %>% distinct(country, iso2c)
gdpcap %>% filter(country == "World") %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD)) +
geom_line()
gdpcap %>% filter(iso2c %in% c("BR", "RU", "IN", "CN")) %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) +
geom_line() +
labs(title = "GDP per capta of BRICs", y = "GDP per capita (constant 2015 US$)")
(low_countries <- wb_countries %>% filter(income == "Low income"))
(gdpcap_low <- semi_join(gdpcap, low_countries))
gdpcap_low %>%
ggplot(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) +
geom_line() +
labs(title = "GDP per capta of low income countries", y = "GDP per capita (constant 2015 US$)")
gdpcap_co2 <- read_csv("data/gdpcap_co2.csv")
gdpcap_co2
co2 <- gdpcap_co2 %>%
select(country, iso2c, iso3c, year, co2 = EN.ATM.CO2E.PC, region)
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>% distinct(country, iso2c, iso3c, region)
co2 %>% filter(country %in% c("France", "Germany", "Italy", "Japan", "United Kingdom", "United States", "Canada", "Russian Federation")) %>%
filter(!is.na(co2)) %>%
ggplot(aes(x = year, y = co2, color = country)) + geom_line() +
labs(title = "CO2 Emission Per Capita of G8 Countries")
gdpcap_co2 <- read_csv("data/gdpcap_co2.csv")
gdpcap_co2
summary(gdpcap_co2)
gdpcap_co2 %>% filter(year == 2021) %>%
ggplot(aes(x = NY.GDP.PCAP.KD, y = EN.ATM.CO2E.PC)) +
geom_point()
gdpcap_co2 %>% filter(region != "Aggregates", year == "2021")
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(NY.GDP.PCAP.KD), !is.na(EN.ATM.CO2E.PC)) %>%
group_by(year) %>% summarize(n = n())
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(NY.GDP.PCAP.KD), !is.na(EN.ATM.CO2E.PC), year == 2019) %>%
ggplot(aes(x = NY.GDP.PCAP.KD, y = EN.ATM.CO2E.PC)) +
geom_point()
gdpcap_co2 %>% filter(region != "Aggregates", !is.na(NY.GDP.PCAP.KD), !is.na(EN.ATM.CO2E.PC), year == 2019) %>%
ggplot(aes(x = log10(NY.GDP.PCAP.KD), y = log10(EN.ATM.CO2E.PC))) +
geom_point()
gdpco2_2019 <- gdpcap_co2 %>% select(region, year, gdp = NY.GDP.PCAP.KD, co2 = EN.ATM.CO2E.PC) %>%
filter(region != "Aggregates", !is.na(gdp), !is.na(co2), year == 2019)
gdpco2_2019 %>% ggplot(aes(x = log10(gdp), y = log10(co2))) +
geom_point() +
labs(title = bquote(~CO[2]~ "Log10 Scale Plot of "~CO[2]~" Emission Per Capita Against GDP Per Capitain 2019"),
subtitle = bquote(~CO[2]~": metric tons per capita, GDP: constant 2015 US$"),
x = bquote(~CO[2]~ "Emission Per Capita (Log10))"), y = "GDP Per Capita (Log10)") +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula = y ~ x, method = "loess", col = "red")
summary(gdpco2_2019)
lm(log10(co2) ~ log10(gdp), data = gdpco2_2019) %>% summary()
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
gdpco2log_sse <- sum((log10(gdpco2_2019$co2) - gdpco2log_model$fitted.values)^2)
(gdpco2log_rse <- sqrt(gdpco2log_sse/182))
gdpco2log_ssyy <- sum((log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2)))^2)
1-gdpco2log_sse/gdpco2log_ssyy
gdpco2log_ssxx <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))^2)
gdpco2log_ssxx <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))^2)
gdpco2log_ssxy <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))*(log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2))))
gdpco2log_ssxx <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))^2)
gdpco2log_ssxy <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))*(log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2))))
(gdpco2log_slope = gdpco2log_ssxy/gdpco2log_ssxx)
gdpco2log_ssxx <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))^2)
gdpco2log_ssxy <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))*(log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2))))
(gdpco2log_slope <- gdpco2log_ssxy/gdpco2log_ssxx)
(gdpco2log_intercept <- mean(log10(gdpco2_2019$co2)) - gdpco2log_slope*mean(log10(gdpco2_2019$gdp)))
gdpco2log_ssxx <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))^2)
gdpco2log_ssxy <- sum((log10(gdpco2_2019$gdp)- mean(log10(gdpco2_2019$gdp)))*(log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2))))
gdpco2log_slope <- gdpco2log_ssxy/gdpco2log_ssxx
gdpco2log_intercept <- mean(log10(gdpco2_2019$co2)) - gdpco2log_slope*mean(log10(gdpco2_2019$gdp))
c(Intercept = gdpco2log_intercept, Slope = gdpco2log_slope)
gdpco2log_model <- lm(log10(co2) ~ log10(gdp), data = gdpco2_2019)
gdpco2log_sse <- sum((log10(gdpco2_2019$co2) - gdpco2log_model$fitted.values)^2)
(gdpco2log_rse <- sqrt(gdpco2log_sse/182))
gdpco2log_ssyy <- sum((log10(gdpco2_2019$co2)- mean(log10(gdpco2_2019$co2)))^2)
1-gdpco2log_sse/gdpco2log_ssyy
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
download.file(url = url, destfile = "data/pop.csv", skip = 1)
pop <- read_csv("data/pop.csv")
pop
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
download.file(url = url, destfile = "data/pop.csv")
pop <- read_csv("data/pop.csv", skip = 1)
pop
library(tidyverse)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + facet_grid(cols = Species)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + facet_grid(cols = Species)
df_iris
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + facet_grid(cols = vars(Species))
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + facet_grid(cols = vars(Species))
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
df_iris
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
plot(cars)
plot(cars)
source("~/Documents/_class/gsclasses/2022/intro_R/intro2r/etra.R")
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
library(tidyverse)
df_iris
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + facet_grid(cols = vars(Species))
plot(cars)
plot(cars)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + facet_grid(cols = vars(Species))
source("~/Documents/_class/gsclasses/2022/intro_R/intro2r/etra.R")
gdpcap <- WDI(country = "all", indicator = "NY.GDP.PCAP.KD")
gdpcap <- WDI(country = "all", indicator = "NY.GDP.PCAP.KD")
library(WDI)
gdpcap <- WDI(country = "all", indicator = "NY.GDP.PCAP.KD")
gdpcap
write_csv(gdpcap, "data/gdpcap.csv")
library(tidyverse)
library(tidyverse)
df_iris <- datasets::iris
class(df_iris)
tbl_iris <- as_tibble(datasets::iris)
class(tbl_iris)
df_iris
slice(df_iris, 1:10)
11+2
1:10
seq(1,10, by = 2)
glimpse(df_iris)
typeof(df_iris$Species)
class(df_iris$Species)
typeof(df_iris$Sepal.Length)
class(df_iris$Sepal.Length)
summary(df_iris)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
labs(title = "Scatter Plot of Sepal Data of Iris", x = "Sepal Length", y = "Sepal Width")
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram()
ggplot(data = df_iris, aes(x = Sepal.Length)) +
geom_histogram(bins = 10)
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_violin()
ggplot(data = df_iris, aes(x = Species, y = Sepal.Length)) +
geom_jitter(width = 0.2)
ggplot(data = df_iris, aes(x = Sepal.Length, fill = Species)) +
geom_density(alpha = 0.5)
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
lm(Sepal.Width ~ Sepal.Length, data = df_iris)
lm(Sepal.Width ~ Sepal.Length, data = df_iris) %>% summary()
ggplot(data = df_iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(df_iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(aes(color = Species)) +
geom_smooth(aes(color = Species), formula = y ~ x, method = "lm", se = FALSE) +
geom_smooth(formula =  y ~ x, method = "lm", se = FALSE, color = "black", linetype = "twodash", size = 1.5)
library(tidyverse)
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv" # long file name
(pop <- read_csv(url))
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
(pop <- read_csv(url, skip = 1))
url <- "https://data.un.org/_Docs/SYB/CSV/SYB65_1_202209_Population,%20Surface%20Area%20and%20Density.csv"
download.file(url = url, destfile = "data/pop.csv")
pop <- read_csv("data/pop.csv", skip = 1)
pop
url_class <- "https://databankfiles.worldbank.org/data/download/site-content/CLASS.xlsx"
download.file(url = url_class, destfile = "data/CLASS.xlsx")
library(readxl)
wb_countries_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =219)
wb_countries <- wb_countries_tmp %>%
select(country = Economy, iso3c = Code, region = Region, income = `Income group`, lending = "Lending category", other = "Other (EMU or HIPC)")
wb_countries
wb_regions_tmp <- read_excel("data/CLASS.xlsx", sheet = 1, skip = 0, n_max =266) %>%
slice(-(1:220))
wb_regions <- wb_regions_tmp %>%
select(region = Economy, iso3c = Code) %>% drop_na()
wb_regions
library(WDI)
WDIsearch(string = "NY.GDP.PCAP.KD",
field = "indicator", cache = NULL)
WDIsearch(string = "NY.GDP.PCAP.KD",
field = "indicator", short = FALSE, cache = NULL)
WDIsearch(string = "gdp per capita",
field = "name", cache = NULL)
WDIsearch(string = "6.0.GDP_current", field = "indicator", short = FALSE)
WDIsearch(string = "EN.ATM.CO2E.PC", field = "indicator", short = FALSE)
WDIsearch(string = "population, total", field = "name", short = FALSE)
WDIsearch(string = "SP.POP.TOTL", field = "indicator", short = FALSE)
gdpcap <- WDI(country = "all", indicator = "NY.GDP.PCAP.KD")
gdpcap
write_csv(gdpcap, "data/gdpcap.csv")
gdpcap_co2 <- WDI(country = "all", indicator = c("NY.GDP.PCAP.KD", "EN.ATM.CO2E.PC"), extra = TRUE)
gdpcap_co2 %>% filter(year == 2021) %>%
ggplot(aes(x = NY.GDP.PCAP.KD, y = EN.ATM.CO2E.PC)) +
geom_point()
head(iris)
iris[Species==setosa]
iris[,Species==setosa]
iris$Species
iris[,5]=="setosa"
iris[iris[5]=="setosa"]
iris_setosa <- iris[iris[5]=="setosa"]
iris_setosa
head(iris_setosa)
iris_setosa <- iris[iris$Species=="setosa"]
iris_setosa <- iris[iris$Species=="setosa",]
head(iris_setosa)
plot(cars)
head(iris)
plot(iris)
cor(iris)
plot(iris)
cor(iris[[1:4]])
cor(iris[,1:4])
cor(iris[,1:4])
str(iris)
sumamry(iris)
summary(iris)
hist(iris$Sepal.Length)
hist(iris$Sepal.Length, 10)
hist(iris$Sepal.Length, breaks=10)
hist(iris$Sepal.Length, breaks=12)
hist(iris$Sepal.Length, breaks=5)
hist(iris$Sepal.Length, breaks=20)
hist(iris$Sepal.Length, breaks=15)
hist(iris$Sepal.Length)
plot(iris$Sepal.Length, iris$Sepal.Width)
coronavirus <- read.csv("https://github.com/RamiKrispin/coronavirus/raw/master/csv/coronavirus.csv")
coronavirus$date <- as.Date(coronavirus$date)
COUNTRY <- "Japan"
df0 <- coronavirus[coronavirus$country == COUNTRY,]
df_confirmed <- df[df$type == "confirmed",]
coronavirus <- read.csv("https://github.com/RamiKrispin/coronavirus/raw/master/csv/coronavirus.csv")
coronavirus$date <- as.Date(coronavirus$date)
COUNTRY <- "Japan"
df <- coronavirus[coronavirus$country == COUNTRY,]
df_confirmed <- df[df$type == "confirmed",]
df_death <- df[df$type == "death",]
plot(df_confirmed$date, df_confirmed$cases, type = "h")
plot(df_death$date, df_death$cases, type = "h")
coronavirus <- read.csv("https://github.com/RamiKrispin/coronavirus/raw/master/csv/coronavirus.csv")
coronavirus$date <- as.Date(coronavirus$date)
COUNTRY <- "Japan"
df <- coronavirus[coronavirus$country == COUNTRY,]
df_confirmed <- df[df$type == "confirmed",]
df_death <- df[df$type == "death",]
plot(df_confirmed$date, df_confirmed$cases, type = "h", main="感染者")
plot(df_death$date, df_death$cases, type = "h")
coronavirus <- read.csv("https://github.com/RamiKrispin/coronavirus/raw/master/csv/coronavirus.csv")
coronavirus$date <- as.Date(coronavirus$date)
COUNTRY <- "Japan"
df <- coronavirus[coronavirus$country == COUNTRY,]
df_confirmed <- df[df$type == "confirmed",]
df_death <- df[df$type == "death",]
plot(df_confirmed$date, df_confirmed$cases, type = "h")
plot(df_death$date, df_death$cases, type = "h")
coronavirus <- read.csv("https://github.com/RamiKrispin/coronavirus/raw/master/csv/coronavirus.csv")
head(coronavirus)
coronavirus$date <- as.Date(coronavirus$date)
COUNTRY <- "Japan"
df <- coronavirus[coronavirus$country == COUNTRY,]
df_confirmed <- df[df$type == "confirmed",]
df_death <- df[df$type == "death",]
plot(df_confirmed$date, df_confirmed$cases, type = "h")
plot(df_death$date, df_death$cases, type = "h")
plot(cars, main="散布図")
library(tidyverse)
knitr::kable(iris[1:6, ])
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point() + labl(title = "散布図")
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point() + label(title = "散布図")
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point() + labs(title = "散布図")
head(cars)
df_iris <- iris
colnmes(df_iris) <- c("萼長","萼幅","葉長","葉幅","種別" )
df_iris <- iris
colnames(df_iris) <- c("萼長","萼幅","葉長","葉幅","種別" )
knitr::kable(iris[1:6, ])
knitr::kable(df_iris[1:6, ])
ggplot(iris, aes(x = 葉長, y = 葉幅, col = 種別)) +
geom_point() + labs(title = "散布図")
ggplot(iris, aes(x = "葉長", y = "葉幅", col = "種別")) +
geom_point() + labs(title = "散布図")
ggplot(iris, aes(x = `葉長`, y = `葉幅`, col = `種別`)) +
geom_point() + labs(title = "散布図")
ggplot(df_iris, aes(x = `葉長`, y = `葉幅`, col = `種別`)) +
geom_point() + labs(title = "散布図")
df_iris <- iris
colnames(df_iris) <- c("萼長","萼幅","葉長","葉幅","種別" )
df_iris[,`種別`=="setosa"] <- "檜扇菖蒲"
summary(iris)
df_iris <- iris
colnames(df_iris) <- c("萼長","萼幅","葉長","葉幅","Species" )
tab <- data.frame(Species = c(setosa, virsicolor, virginica), "種別" = c("ヒオウギアヤメ", "ブルーフラッグ", "バージニカ"))
df_iris <- iris
colnames(df_iris) <- c("萼長","萼幅","葉長","葉幅","Species" )
tab <- data.frame(Species = c("setosa", "virsicolor", "virginica"), "種別" = c("ヒオウギアヤメ", "ブルーフラッグ", "バージニカ"))
df_iris <- df_iris %>% left_join(tab, by=c("Species" = "Species"))
df_iris
df_iris <- iris
colnames(df_iris) <- c("萼長","萼幅","葉長","葉幅","Species" )
tab <- data.frame(Species = c("setosa", "versicolor", "virginica"), "種別" = c("ヒオウギアヤメ", "ブルーフラッグ", "バージニカ"))
df_iris <- df_iris %>% left_join(tab, by=c("Species" = "Species"))
df_iris
df_iris <- iris
colnames(df_iris) <- c("萼長","萼幅","葉長","葉幅","Species" )
tab <- data.frame(Species = c("setosa", "versicolor", "virginica"), "種別" = c("ヒオウギアヤメ", "ブルーフラッグ", "バージニカ"))
df_iris <- df_iris %>% mutate_join(tab, by=c("Species" = "Species"))
df_iris <- iris
colnames(df_iris) <- c("萼長","萼幅","葉長","葉幅","Species" )
tab <- data.frame(Species = c("setosa", "versicolor", "virginica"), "種別" = c("ヒオウギアヤメ", "ブルーフラッグ", "バージニカ"))
df_iris <- df_iris %>% semi_join(tab, by=c("Species" = "Species"))
df_iris
df_iris <- iris
colnames(df_iris) <- c("萼長","萼幅","葉長","葉幅","Species" )
tab <- data.frame(Species = c("setosa", "versicolor", "virginica"), "種別" = c("ヒオウギアヤメ", "ブルーフラッグ", "バージニカ"))
df_iris <- df_iris %>% left_join(tab, by=c("Species" = "Species")) %>% select(-5)
df_iris
knitr::kable(df_iris[1:6, ])
ggplot(df_iris, aes(x = `葉長`, y = `葉幅`, col = `種別`)) +
geom_point() + labs(title = "散布図")
plot(df_iris$`萼長`, df_iris$`萼幅`)
plot(df_iris$`萼長`, df_iris$`萼幅`, main="散布図", xlab="萼長", ylab="萼幅")
plot(df_iris)
plot(df_iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Sepal.Width)
ggplot(df_iris, aes(x = `葉長`, y = `葉幅`, col = `種別`)) +
geom_point() + labs(title = "散布図", x = "葉長", y = "葉幅")
plot(cars)
df_iris <- iris
colnames(df_iris) <- c("萼長","萼幅","葉長","葉幅","Species" )
tab <- data.frame(Species = c("setosa", "versicolor", "virginica"), "種別" = c("ヒオウギアヤメ", "ブルーフラッグ", "バージニカ"))
df_iris <- df_iris %>% left_join(tab, by=c("Species" = "Species")) %>% select(-5)
df_iris %>% slice(1:2)
install.packages("showtext")
library(tidyverse)
library(showtext)
font_add_google('Noto Sans')
showtext_auto()
df_iris <- iris
colnames(df_iris) <- c("萼長","萼幅","葉長","葉幅","Species" )
tab <- data.frame(Species = c("setosa", "versicolor", "virginica"), "種別" = c("ヒオウギアヤメ", "ブルーフラッグ", "バージニカ"))
df_iris <- df_iris %>% left_join(tab, by=c("Species" = "Species")) %>% select(-5)
df_iris %>% slice(1:2)
knitr::kable(df_iris[1:6, ])
install.packages(c("bookdown", "boot", "broom", "class", "cli", "codetools", "colorspace", "coronavirus", "dbplyr", "dplyr", "DT", "e1071", "evaluate", "fansi", "fontawesome", "forcats", "foreign", "fs", "future", "gargle", "ggplot2", "ggrepel", "httpuv", "janitor", "kernlab", "knitr", "lubridate", "mapproj", "markdown", "MASS", "Matrix", "nlme", "parallelly", "purrr", "ragg", "Rcpp", "readr", "readxl", "sass", "sourcetools", "sp", "spatial", "survival", "tidyr", "timechange", "TSP", "utf8", "vctrs", "vroom", "xfun", "yaml"))
plot(cars, main="散布図")
library(tidyverse)
library(showtext) # install showtext package
font_add_google('Noto Sans')
showtext_auto()
plot(cars, main="散布図")
library(tidyverse)
library(showtext)
font_add_google('Noto Sans')
showtext_auto()
plot(cars)
str(iris)
str(iris)
summary(iris)
head(iris)
hist(iris$Sepal.Length)
source("~/Documents/_class/gsclasses/2022/intro_R/intro2r/docs/templates.Rmd")
